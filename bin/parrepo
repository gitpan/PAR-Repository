#!/usr/bin/perl
use 5.006;
use strict;
use warnings;
our $VERSION = '0.01';

require PAR::Repository;
use Getopt::Long qw/GetOptions/;


####
# command subroutines
####

my %Opt = (
	repository => [ 'repository|r=s' ],
	force      => [ 'force|f' ],
	file       => [ 'file|f=s' ],
	dist_attr  => [ 'distname|n=s', 'distversion|v=s', 'arch|a=s', 'perlversion|p=s' ],
	overwrite  => [ 'overwrite|o' ],
	anys       => [ 'any-arch|anyarch|any_arch', 'any-version|anyversion|any_version' ],
	verbose    => [ 'verbose+', 'verbosity=i' ],
);

sub create_cmd {
	my %o = (repository => 'repo', force => 0);
	GetOptions( \%o, map {@$_} @Opt{qw/
		verbose repository force
	/},);

	$PAR::Repository::VERBOSE = defined($o{verbosity}) ? $o{verbosity} : $o{verbose} || 0; 

	if (-e $o{repository} and not $o{force}) {
		print "Repository path exists. Not overwriting without --force.\n";
		exit(1);
	}
	elsif (-e $o{repository}) {
		print "Removing old repository directory.\n";
		require File::Path;
		File::Path::rmtree($o{repository});
	}

	print "Creating new repository at '$o{repository}'.\n";
	my $repo = PAR::Repository->new( path => $o{repository} );
	
	return(1);
}

sub inject_cmd {
	my %o = (repository => 'repo');
	GetOptions( \%o, map {@$_} @Opt{qw/
		verbose repository dist_attr file overwrite anys
	/},);

	$PAR::Repository::VERBOSE = defined($o{verbosity}) ? $o{verbosity} : $o{verbose} || 0;

	if (not -d $o{repository}) {
		print "Error: Repository path does not exist.\n";
		exit(1);
	}

	my @files;
	if (
		not defined $o{file}
	) {
		print "Error: Could not find distribution file. Use --file to specify it.\n";
		exit(1);
	}
	elsif ($o{file} =~ /[\[\]{}*?~]/) {
		# It's a glob. (see regex above, checking for meta-chars)
		@files = glob($o{file});
	}
	elsif (not -f $o{file}) {
		print "Error: Could not find distribution file. Use --file to specify it.\n";
		exit(1);
	}
	else {
		push @files, $o{file};
	}
	
	if (not @files) {
		print "Error: Could not find distribution file. Use --file to specify it.\n";
		exit(1);
	}

	my $repo = PAR::Repository->new( path => $o{repository} );

	foreach my $file (@files) {
		print "Injecting file '$file' into repository.\n";
		$repo->inject(
			file => $file,
			(defined $o{distname}      ? (distname    => $o{distname})      : ()),
			(defined $o{distversion}   ? (distversion => $o{distversion})   : ()),
			(defined $o{arch}          ? (arch        => $o{arch})          : ()),
			(defined $o{perlversion}   ? (perlversion => $o{perlversion})   : ()),
			(defined $o{'any-arch'}    ? (any_arch    => $o{'any-arch'})    : ()),
			(defined $o{'any-version'} ? (any_version => $o{'any-version'}) : ()),
			(defined $o{overwrite}     ? (overwrite   => $o{overwrite})     : ()),
		);
	}

	return(1);
}

sub remove_cmd {
	my %o = (repository => 'repo');
	GetOptions( \%o, map {@$_} @Opt{qw/
		verbose repository dist_attr file 
	/},);

	$PAR::Repository::VERBOSE = defined($o{verbosity}) ? $o{verbosity} : $o{verbose} || 0;

	if (not -d $o{repository}) {
		print "Error: Repository path does not exist.\n";
		exit(1);
	}

	my @files;
	if (
		not defined $o{file}
	) {
		print "Error: Could not find distribution file to remove. Use --file to specify it.\n";
		exit(1);
	}
	
	my $repo = PAR::Repository->new( path => $o{repository} );

	print "Removing file '$o{file}' from repository.\n";
	my $success = $repo->remove(
		file => $o{file},
		(defined $o{distname}      ? (distname    => $o{distname})      : ()),
		(defined $o{distversion}   ? (distversion => $o{distversion})   : ()),
		(defined $o{arch}          ? (arch        => $o{arch})          : ()),
		(defined $o{perlversion}   ? (perlversion => $o{perlversion})   : ()),
	);

	print "Successfully removed file.\n" if $success;
}


my %CMD = (
	inject => \&inject_cmd,
	create => \&create_cmd,
	remove => \&remove_cmd,
);

####
# misc subs
####

sub print_help {
		my $msg = shift;
		$msg .= "\n\n" if defined $msg;
		print $msg if defined $msg;
		require Pod::Text;
		my $parser = Pod::Text->new;
		$parser->parse_from_filehandle(\*DATA);
		exit(1);
}

####
# this is actually run
####

my $cmd = shift @ARGV;

print_help() if (not defined $cmd);

if ($cmd =~ /^-/) {
	unshift @ARGV, $cmd;
	GetOptions(
		'v|version' => sub { print "This is parrepo version '$VERSION'.\n"; exit(1); },
		'h|help'    => sub { print_help() },
	);
	print_help("Missing command?");
}

print_help("Invalid command?") if not exists $CMD{$cmd};

$CMD{$cmd}->();







__DATA__

=head1 NAME

parrepo - server side script for managing PAR repositories

=head1 SYNOPSIS

  parrepo --help | --version
  parrepo COMMAND [command options]
  parrepo create [-r REPODIR] [--force]
  parrepo inject [-r REPODIR] filename.par

=head1 DESCRIPTION

This is a frontend script to the PAR::Repository module.
It lets you create and manage PAR repositories.

=head2 COMMANDS

All commands take the I<--verbose> option to set the verbosity of
error messages. Specifying that option multiple times (up to 4x)
increases the verbosity even more.

Instead of using the I<--verbose> option C<n> times, you can also
use the I<--verbosity n> flag to set it to level C<n>.
Using I<--verbosity> overrides any occurrances of I<--verbose>.

=over 2

=item create

Creates a new repository. Defaults to using a subdirectory called
C<repo>.

Parameters:

  -r or --repository
    Specifies the repository path.
  -f or --force
    Overwrite the directory if it exists.

=item inject

Injects a PAR distribution into the repository. You need to
specify a distribution file to inject using the C<--file>
(or C<-f>) option.

We need to find out which name
and version the distribution has as well as which architecture
and perl version it was compiled for. You can set all these
using options (see below). If you do not, parrepo tries to
infer this information from the file name. This works if the
file name is of the following form:

  WWW-Mechanize-1.32-x86_64-linux-gnu-thread-multi-5.8.6.par

The command line options take precedence over file name parsing.

If you specify the architecture name as I<any_arch>, the distribution
will be put into the architecture agnostic portion of the
repository. I<any_version> works similar for the perl version.

Alternatively, you can use the C<--any-arch> and C<--any-version>
switches for a similar effect. If you use the switches, only a symlink
to the original distribution will be put into the C<any_*> section of
the repository.

Parameters:

  -f or --file
    The distribution file to inject. (mandatory)
    parrepo will do a glob if the file name contains meta characters.
    this works: --file => '*.par'
  -r or --repository
    Specifies the repository path.
  -n or --distname
  -v or --distversion
  -a or --arch
  -p or --perlversion
    Set the necessary distribution information.
  --any-arch or --anyarch or --any_arch
    If set, a symlink to the distribution will be put into the
	architecture agnostic portion of the repository.
  --any-version or --anyversion or --any_version
    Same for the perl version.
  -o or --overwrite
    Set this if you want to overwrite a distribution of the
	same name in the repository.

=back

=cut

